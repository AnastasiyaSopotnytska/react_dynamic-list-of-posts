{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/post.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","PostsList","userSelect","setPostId","useState","posts","setPosts","selectedPostId","setSelectedPostId","useEffect","userId","fetch","then","response","json","post","className","map","title","type","onClick","id","getPostComments","postId","NewCommentForm","handleComment","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","comment","newComment","createdAt","Date","updatedAt","method","headers","JSON","stringify","placeholder","value","onChange","target","PostDetails","comments","setComments","isShowComments","setIsShowComments","setPost","commentsFromServer","getPostDetails","toString","postFromServer","handlerDelete","commentId","getCommentDelete","length","currentComments","App","setUserSelect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ce8467b.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/post';\nimport { Post } from '../../react-app-env';\nimport './PostsList.scss';\n\ntype Props = {\n  userSelect: string;\n  setPostId: (id: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userSelect,\n  setPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n\n  useEffect(() => {\n    getUserPosts(userSelect)\n      .then(post => setPosts(post));\n  }, [userSelect]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n            data-cy=\"postDetails\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                if (post.id === selectedPostId) {\n                  setSelectedPostId(0);\n                  setPostId(0);\n                } else {\n                  setSelectedPostId(post.id);\n                  setPostId(post.id);\n                }\n              }}\n            >\n              {post.id === selectedPostId ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = (userId: string) => {\n  if (userId === '0') {\n    return fetch(`${BASE_URL}/posts`)\n      .then(response => response.json());\n  }\n\n  return fetch(`${BASE_URL}/posts?userId=${userId}`)\n    .then(response => response.json());\n};\n\nexport const getPostDetails = (postId: string) => {\n  return fetch(`${BASE_URL}/posts/:${postId}`)\n    .then(response => response.json());\n};\n","import { NewComment } from '../react-app-env';\nimport { BASE_URL } from './api';\n\nexport const getPostComments = (postId: number) => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => response.json());\n};\n\nexport const getCommentDelete = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const getCommentAdd = (comment: NewComment) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    body: JSON.stringify({ comment }),\n  })\n    .then(response => response.json());\n};\n","import React, { useState } from 'react';\nimport { getCommentAdd } from '../../api/comments';\nimport { NewComment } from '../../react-app-env';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number;\n  handleComment: (newComment: NewComment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, handleComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = {\n      id: postId + 1000,\n      postId,\n      name,\n      email,\n      body,\n      createdAt: Date(),\n      updatedAt: Date(),\n    };\n\n    getCommentAdd(newComment);\n    handleComment(newComment);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getCommentDelete, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/post';\nimport { Comment, NewComment, Post } from '../../react-app-env';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [comments, setComments] = useState<Comment[] | NewComment[]>([]);\n  const [isShowComments, setIsShowComments] = useState(false);\n  const [post, setPost] = useState<Post | null>(null);\n\n  const handleComment = (newComment: Comment) => {\n    setComments(currentComments => [...currentComments, newComment]);\n  };\n\n  useEffect(() => {\n    getPostComments(postId)\n      .then(commentsFromServer => setComments(commentsFromServer));\n\n    getPostDetails(postId.toString())\n      .then(postFromServer => setPost(postFromServer));\n  }, [postId]);\n\n  const handlerDelete = (commentId: number) => {\n    getCommentDelete(commentId);\n\n    getPostComments(postId)\n      .then(commentsFromServer => setComments(commentsFromServer));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setIsShowComments(!isShowComments)}\n        >\n          {!isShowComments\n            ? `Hide ${comments.length} comments`\n            : `Shown ${comments.length} comments`}\n        </button>\n\n        {!isShowComments && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => handlerDelete(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {post && (\n            <NewCommentForm postId={post?.id} handleComment={handleComment} />\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [userSelect, setUserSelect] = useState('0');\n  const [postId, setPostId] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userSelect}\n            onChange={(event) => setUserSelect(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userSelect={userSelect}\n            setPostId={setPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {postId !== 0 && (\n            <PostDetails postId={postId} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}